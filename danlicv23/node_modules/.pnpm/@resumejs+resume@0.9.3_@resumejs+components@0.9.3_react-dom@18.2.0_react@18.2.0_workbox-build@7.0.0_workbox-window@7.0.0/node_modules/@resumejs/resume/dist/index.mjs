#!/usr/bin/env node
import path, { isAbsolute } from 'node:path';
import process from 'node:process';
import { build, preview, createServer } from 'vite';
import { VitePWA } from 'vite-plugin-pwa';
import react from '@vitejs/plugin-react';
import minimist from 'minimist';
import MagicString from 'magic-string';

function entry({ template } = {}) {
  const RESUME_ENTRY = "/RESUME_ENTRY.tsx";
  let resumePath = "";
  return {
    name: "resume:entry",
    configResolved(config) {
      resumePath = path.resolve(config.root, "README.md");
    },
    transformIndexHtml: {
      enforce: "pre",
      transform() {
        return [
          {
            tag: "script",
            attrs: {
              type: "module"
            },
            children: `
              import resume from ${JSON.stringify(`${resumePath}?raw`)}
              window.__RESUME__ = resume
            `,
            injectTo: "body-prepend"
          },
          {
            tag: "script",
            attrs: {
              type: "module",
              src: RESUME_ENTRY
            },
            injectTo: "body"
          }
        ];
      }
    },
    resolveId(id) {
      if (id === RESUME_ENTRY)
        return id;
    },
    async load(id) {
      if (id === RESUME_ENTRY) {
        let templateId;
        if (template) {
          const resolvedTemplate = await this.resolve(template);
          templateId = resolvedTemplate?.id || template;
        }
        const ms = new MagicString(`
          import React from 'react'
          import ReactDOM from 'react-dom/client'
          import { Resume } from '@resumejs/components'
          ${templateId ? `import CustomizeComponents from '${templateId}'` : ""}

          const Show = () => {
            return (
              <Resume ${templateId ? "components={CustomizeComponents}" : ""} className="md">{window.__RESUME__}</Resume>
            )
          }

          ReactDOM.createRoot(document.getElementById('root'))
            .render(
              <React.StrictMode>
                <Show />
              </React.StrictMode>
            )
        `);
        return {
          code: ms.toString(),
          map: ms.generateMap()
        };
      }
    }
  };
}

const cwd = process.cwd();
const { _, config, template } = minimist(process.argv.slice(2), {
  string: "-"
});
function getViteConfig() {
  const configFile = config ? isAbsolute(config) ? config : path.join(cwd, config) : void 0;
  const _config = {
    logLevel: "info",
    configFile,
    plugins: [
      react(),
      entry({
        template
      }),
      VitePWA({ registerType: "autoUpdate" })
    ]
  };
  return _config;
}
if (_.includes("build")) {
  build(getViteConfig());
} else if (_.includes("preview")) {
  preview(getViteConfig()).then((res) => {
    res.printUrls();
  });
} else {
  createServer(getViteConfig()).then((res) => {
    res.listen(3e3).then(() => {
      res.printUrls();
    });
  });
}
